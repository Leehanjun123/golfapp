# Docker Compose 설정 - 골프 AI 앱
version: '3.8'

services:
  # 메인 애플리케이션
  golf-ai-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
        VERSION: ${VERSION:-latest}
    container_name: golf-ai-backend
    restart: unless-stopped
    ports:
      - "${PORT:-8080}:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=8080
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./ab-test-data:/app/ab-test-data
      - ./feedback-data:/app/feedback-data
    depends_on:
      - mongodb
      - redis
    networks:
      - golf-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB 데이터베이스
  mongodb:
    image: mongo:6.0
    container_name: golf-ai-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-golfai}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - golf-ai-network

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: golf-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - golf-ai-network

  # 모니터링 대시보드
  monitoring-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: golf-ai-monitoring
    restart: unless-stopped
    ports:
      - "3001:3001"
    command: ["node", "monitoring-dashboard.js"]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DASHBOARD_PORT=3001
      - TARGET_URL=http://golf-ai-app:8080
    depends_on:
      - golf-ai-app
    networks:
      - golf-ai-network

  # A/B 테스팅 시스템
  ab-testing:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: golf-ai-ab-testing
    restart: unless-stopped
    ports:
      - "3002:3002"
    command: ["node", "ab-testing-system.js"]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - AB_TEST_PORT=3002
    volumes:
      - ./ab-test-data:/app/ab-test-data
    networks:
      - golf-ai-network

  # 사용자 피드백 시스템
  feedback-system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: golf-ai-feedback
    restart: unless-stopped
    ports:
      - "3003:3003"
    command: ["node", "user-feedback-system.js"]
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - FEEDBACK_PORT=3003
    volumes:
      - ./feedback-data:/app/feedback-data
    networks:
      - golf-ai-network

  # Nginx 리버스 프록시 (프로덕션)
  nginx:
    image: nginx:alpine
    container_name: golf-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - golf-ai-app
      - monitoring-dashboard
      - ab-testing
      - feedback-system
    networks:
      - golf-ai-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

networks:
  golf-ai-network:
    driver: bridge